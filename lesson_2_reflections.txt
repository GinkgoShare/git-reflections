What happens when you initialize a repository? Why do you neeed to do it?

When you initialize a git repository, the utility creates the necessary metadata needed to track its history.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows a user to choose what specific contents of the working directory they would like to commit to the repository.

How can you use the staging area to make sure you have one commit per logical change?

You can choose to add whichever files you want to commit from your working directory and hold them in the the staging area. Once you commit, git will commit only those files previously selected.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful in developing multiple versions of working repositories.

How do the diagrams help you visualize the branch structure?

It is a good display of what commits are visible to which branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Te result is a branch that contains the same logic of both files. One branch is chosen, by being first on the list, to be the main branch. All commits from both branches get merged and sorted based on their timestamp. This makes every commit brom both branch visible to the main branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros:
	- saves time

cons:
	- potential for mistakes




git commands learned in lesson 2:

	git init : 										turns an existing directory into a git repository

	git status : 									shows which files have changed since the last commit, shows the most 													recent commit

	git add : 										adds chosen files to the staging area prepping for a commit

	git commit -m "Commit message" | git commit :	checks in the files held in the staging area to the attached "HEAD"        												   (labeled branch)

	git reset --hard : 								discards changes within the working directory or the staging area (THIS IS 												   IRREVERSIBLE!!!)

	git branch <branch_label> : 					running this command without arguments just displays the current branches 												  of the repository, when you run this command with the argument, git 														creates a new branch by the label you specified.

	git branch -d branch_label>						deletes a branch label but retains the branch commits

	git checkout <commit_id> :  					this command sets the requested id to the current commit to run the 													application or to make changes within the repository.

	git checkout master : 							sets the requested id to the master

	git checkout -b <new_branch_name> : 			creates a new branch and checks it out at the same time

	git merge <first_branch> <second_branch> :		second_branch get merged into first

	git show :										shows you differences introduced compared to its parent branch
